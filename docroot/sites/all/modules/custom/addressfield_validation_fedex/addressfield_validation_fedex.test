<?php
/**
 * @file
 * Tests for FedEx Address Field Validation.
 */

/**
 * Tests Address Validation using FedEx Address Validation Service.
 */
class AddressFieldValidationFedexTestCase extends DrupalUnitTestCase {

  const TEST_GROUP = 'FedEx Address Validation';

  public static function getInfo() {
    return array(
      'name' => self::TEST_GROUP,
      'description' => 'Tests address validation using FedEx Address Validation Service.',
      'group' => 'Address Field Validation',
    );
  }

  /**
   * Test valid address
   */
  function testValidAddress() {

    $address = array(
      'name_line' => 'Jerry Radwick',
      'organisation_name' => 'Evolving Web',
      'thoroughfare' => '300 Saint-Sacrement, Suite 114',
      'premise' => '',
      'street_block' => '',
      'locality_block' => '',
      'locality' => 'Montreal',
      'administrative_area' => 'QC',
      'postal_code' => 'H2Y 1X4',
      'country' => 'CA',
    );
    $response = _addressfield_validation_fedex_validate(array($address));
    $test_value = !isset ($response->Error) && (0 === sizeof($response->AddressResults->Errors));
    $this->assertTrue($test_value, 'Address with valid data treated as correct.', self::TEST_GROUP);

  }

  /**
   * Test address without premise number
   */
  function testAddressWithoutPremiseNumber() {

    $test_group = '';

    $address = array(
      'name_line' => 'Jerry Radwick',
      'organisation_name' => 'Evolving Web',
      'thoroughfare' => 'Saint-Sacrement, Suite 114',
      'premise' => '',
      'street_block' => '',
      'locality_block' => '',
      'locality' => 'Montreal',
      'administrative_area' => 'QC',
      'postal_code' => 'H2Y 1X4',
      'country' => 'CA',
    );
    $response = _addressfield_validation_fedex_validate(array($address));
    $test_value = !isset ($response->Error) && in_array('Invalid or missing premise number.', $response->AddressResults->Errors);
    $this->assertTrue($test_value, 'Address without premise number treated as incorrect.', self::TEST_GROUP);

  }

  /**
   * Test address without postal code and city
   */
  function testAddressWithIncorrectPostalCode() {

    $test_group = '';

    // Test correct address with all elements
    $address = array(
      'name_line' => 'Jerry Radwick',
      'organisation_name' => 'Evolving Web',
      'thoroughfare' => '300 Saint-Sacrement, Suite 114',
      'premise' => '',
      'street_block' => '',
      'locality_block' => '',
      'locality' => '',
      'administrative_area' => 'QC',
      'postal_code' => '',
      'country' => 'CA',
    );
    $response = _addressfield_validation_fedex_validate(array($address));
    $test_value = !isset ($response->Error) && in_array('Address incomplete or invalid.', $response->AddressResults->Errors);
    $this->assertTrue($test_value, 'Address without postal code and city treated as incorrect.', self::TEST_GROUP);

  }

  /**
   * Test address with incorrect street name
   */
  function testAddressWithIncorrectStreetName() {

    $test_group = '';

    // Test correct address with all elements
    $address = array(
      'name_line' => 'Jerry Radwick',
      'organisation_name' => 'Evolving Web',
      'thoroughfare' => '300 Saint-Barnard, Suite 114',
      'premise' => '',
      'street_block' => '',
      'locality_block' => '',
      'locality' => 'Montreal',
      'administrative_area' => 'QC',
      'postal_code' => 'H2Y 1X4',
      'country' => 'CA',
    );
    $response = _addressfield_validation_fedex_validate(array($address));
    $test_value = !isset ($response->Error) && in_array('Address incomplete or invalid.', $response->AddressResults->Errors);
    $this->assertTrue($test_value, 'Address without postal code and city treated as incorrect.', self::TEST_GROUP);
    
  }

}
